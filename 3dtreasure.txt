import { Svg } from "@react-three/drei";
<Svg src={"/arrow.svg"} scale={0.01}/>


const x = 0, y = 0;
const extrudeSettings = { depth: 8, bevelEnabled: true, bevelSegments: 2, steps: 2, bevelSize: 1, bevelThickness: 1 };
const fishShape = new THREE.Shape()
					.moveTo( x, y )
					.quadraticCurveTo( x + 50, y - 80, x + 90, y - 10 )
					.quadraticCurveTo( x + 100, y - 10, x + 115, y - 40 )
					.quadraticCurveTo( x + 115, y, x + 115, y + 40 )
					.quadraticCurveTo( x + 100, y + 10, x + 90, y + 10 )
					.quadraticCurveTo( x + 50, y + 80, x, y );

//inside mesh
<shapeGeometry args={[fishShape]} />
<extrudeBufferGeometry args={[fishShape, extrudeSettings]}/>


//leave shape
const leave = new THREE.Shape()
    .moveTo(0, 0)
    .quadraticCurveTo(10, -20, 30, -20)
    .quadraticCurveTo(50, -20, 60, 0)
    .quadraticCurveTo(50, 20, 30, 20)
    .quadraticCurveTo(10, 20, 0, 0)

// path = removal from shape
const smileyMouthPath = new THREE.Path()
    .moveTo( 20, 40 )
    .quadraticCurveTo( 40, 60, 60, 40 )
    .bezierCurveTo( 70, 45, 70, 50, 60, 60 )
    .quadraticCurveTo( 40, 80, 20, 60 )
    .quadraticCurveTo( 5, 50, 20, 40 );

örnek
arcShape.holes.push( holePath );
.holes.push()



// points from shape
spaced or non-spaced 
Get points from shape
Show points in points component
const leave = new THREE.Shape()
    .moveTo(0, 0)
    .quadraticCurveTo(10, -20, 30, -20)
    .quadraticCurveTo(50, -20, 60, 0)
    .quadraticCurveTo(50, 20, 30, 20)
    .quadraticCurveTo(10, 20, 0, 0)

const points = leave.getPoints();
const geometryPoints = new THREE.BufferGeometry().setFromPoints( points );

const spacedPoints = leave.getSpacedPoints( 5 );
const geometrySpacedPoints = new THREE.BufferGeometry().setFromPoints( spacedPoints );

<points args={[geometryPoints]}>
    <pointsMaterial color={"green"} size={10}/>
</points>


// lines with segment
<mesh scale={0.05}>
    <lineSegments args={[geometrySpacedPoints]}>
        <lineBasicMaterial color={"crimson"}/>
    </lineSegments>
</mesh>



//line
const leave = new THREE.Shape()
    .moveTo(0, 0)
    .quadraticCurveTo(10, -20, 30, -20)
    .quadraticCurveTo(50, -20, 60, 0)
    .quadraticCurveTo(50, 20, 30, 20)
    .quadraticCurveTo(10, 20, 0, 0)
const points = leave.getPoints();

<mesh scale={0.05}>
    <Line points={points}>
        <lineBasicMaterial color={"crimson"} />
    </Line>
</mesh>

// add texture to the shape
texture must be inside the arrow function
<mesh scale={0.02} position={[1,0,0]}>
    <shapeGeometry args={[leave]} />
    <meshBasicMaterial  map={texture} side={DoubleSide} />
</mesh>





//Creating shape from vectors Star Shape
const pts2 = [], numPts = 5;
for ( let i = 0; i < numPts * 2; i ++ ) {

    const l = i % 2 == 1 ? 10 : 20;

    const a = i / numPts * Math.PI;

    pts2.push( new THREE.Vector2( Math.cos( a ) * l, Math.sin( a ) * l ) );
}
const shape2 = new THREE.Shape( pts2 );


//TRiangle shape, increase count and create many more shapes
const pts1 = [], count = 3;
for ( let i = 0; i < count; i ++ ) {

    const l = 20;

    const a = 2 * i / count * Math.PI;

    pts1.push( new THREE.Vector2( Math.cos( a ) * l, Math.sin( a ) * l ) );

}
const shape1 = new THREE.Shape( pts1 );



//vector2 (x,y), vector3 (x,y,z)
İmportant 







// SVG extruder and texture applier - Big Thing for future projects 
import { useTexture } from "@react-three/drei";
import { Shape } from "three";
import { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';
const loader = new SVGLoader();
import {RepeatWrapping } from 'three';

let test:Shape[];
loader.load(
	// resource URL
	'/btf.svg',
	// called when the resource is loaded
	function ( data ) {

		const paths = data.paths;
        console.log(paths.length)
        const s = SVGLoader.createShapes(data.paths[1]);
        test = s;
	}
);

const extrudeSettings = { depth: 8, bevelEnabled: true, bevelSegments: 2, steps: 2, bevelSize: 1, bevelThickness: 1 };

const Balloon = () => {
    const texture = useTexture("but.jpg");
    texture.wrapS = RepeatWrapping;
    texture.wrapT = RepeatWrapping;
    texture.repeat.set( 0.008, 0.008 );
    return ( 
        <>
        <mesh scale={0.005} rotation={[0,0,Math.PI]} >
            <extrudeBufferGeometry args={[test, extrudeSettings]}/>            
            <meshBasicMaterial map={texture}/>
        </mesh> 
        </>
     );
}
export default Balloon;







//Instance spacing tests
const InstancedCubes:NextPage<InstancedCubesProps> = ({count}) => {

  const geometry = useMemo(() => new ExtrudeGeometry(blocks[5].shp,extrudeSettings), []);
  const material = useMemo(() => new MeshBasicMaterial({ }), []);
  const meshRef = useMemo(() => new InstancedMesh(geometry, material, count), [count]);

  const cubeSize = 10;
  const startPosition = new Vector3(0,0,0);
  const instanceSpacing = 1;

  const radius = 50; // the radius of the circle
  const interval = (1/2 * Math.PI) / count;     

for (let i = 0; i < count; i++) {
  // Calculate the x, y, and z position of the current cube
/*   const x = startPosition.x + (i % cubeSize) * (1 + instanceSpacing);
  const y = startPosition.y + Math.floor((i / cubeSize) % cubeSize) * (1 + instanceSpacing);
  const z = startPosition.z + Math.floor(i / (cubeSize * cubeSize)) * (1 + instanceSpacing); */

  const x = startPosition.x + (1 - 0.5) * 100;
  const y = startPosition.y + (1 - 0.5) * 100;
  const z = startPosition.z + (i - 0.5) * 100;
  meshRef.setMatrixAt(i, new Matrix4().makeTranslation(x,y,z));
  const color = new Color(Math.random(), Math.random(), Math.random());
  meshRef.setColorAt(i, color);
}

  return <primitive object={meshRef} />;
}